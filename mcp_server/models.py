# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T18:25:36+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional
from uuid import UUID

from pydantic import BaseModel, Field, RootModel, constr


class CredasApiModelsBankAccountsAccountDetails(BaseModel):
    accountNumber: str
    sortcode: str


class AccountNumberValidation(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3
    integer_4 = 4
    integer_5 = 5


class AccountStatus(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3


class AddressValidation(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3
    integer_4 = 4


class CheckStatus(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3


class NameValidation(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2


class SortcodeValidation(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3
    integer_4 = 4


class CredasApiModelsBankAccountsAccountVerificationResponse(BaseModel):
    Address1: Optional[str] = None
    City: Optional[str] = None
    Forename: Optional[str] = None
    MiddleName: Optional[str] = None
    PostCode: Optional[str] = None
    Surname: Optional[str] = None
    accountNumber: Optional[str] = None
    accountNumberValidation: Optional[AccountNumberValidation] = Field(
        None,
        description='Unknown = 0, NoMatch = 1, Valid = 2, Invalid = 3, SevenDigitsMatched = 4, SixDigitsMatched = 5',
    )
    accountNumberValidationText: Optional[str] = None
    accountStatus: Optional[AccountStatus] = Field(
        None, description='Unknown = 0, NoMatch = 1, Live = 2, ClosedOrSettled = 3'
    )
    accountStatusText: Optional[str] = None
    accountValid: Optional[bool] = None
    addressValidation: Optional[AddressValidation] = Field(
        None,
        description='Unknown = 0, NoMatch = 1, CurrentAddress = 2, PreviousAddress = 3, ForwardingAddress = 4',
    )
    addressValidationText: Optional[str] = None
    checkDate: Optional[datetime] = None
    checkId: Optional[UUID] = None
    checkStatus: Optional[CheckStatus] = Field(
        None, description='Unknown = 0, Pass = 1, Refer = 2, Fail = 3'
    )
    error: Optional[bool] = None
    hasBeenOverridden: Optional[bool] = None
    nameValidation: Optional[NameValidation] = Field(
        None, description='Unknown = 0, NoMatch = 1, Valid = 2'
    )
    nameValidationText: Optional[str] = None
    referenceId: Optional[str] = None
    sortcode: Optional[str] = None
    sortcodeValidation: Optional[SortcodeValidation] = Field(
        None,
        description='Unknown = 0, NoMatch = 1, Valid = 2, Invalid = 3, FiveDigitsMatched = 4',
    )
    sortcodeValidationText: Optional[str] = None


class CredasApiModelsBankAccountsPerson(BaseModel):
    forename: str
    middleName: Optional[str] = None
    surname: str


class CredasApiModelsCompaniesSignificantPerson(BaseModel):
    forename: Optional[str] = None
    id: Optional[UUID] = None
    regEntryId: Optional[UUID] = None
    surname: Optional[str] = None


class CheckType(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3


class CredasApiModelsDataCheckAddDataCheckResponse(BaseModel):
    id: UUID
    regCode: str


class CredasApiModelsDataCheckAddress(BaseModel):
    addressLine1: constr(pattern=r'^([A-Za-z0-9 \'\.,&\(\)\/-]*)$')
    addressLine2: Optional[constr(pattern=r'^([A-Za-z0-9 \'\.,&\(\)\/-]*)$')] = None
    addressLine3: Optional[constr(pattern=r'^([A-Za-z0-9 \'\.,&\(\)\/-]*)$')] = None
    city: constr(pattern=r'^([A-Za-z0-9 \'\.,&\(\)\/-]*)$')
    country: constr(pattern=r'^([A-Za-z0-9 \'\.,&\(\)\/-]*)$')
    county: Optional[constr(pattern=r'^([A-Za-z0-9 \'\.,&\(\)\/-]*)$')] = None
    postcode: constr(pattern=r'^([A-Za-z0-9 \'\.,&\(\)\/-]*)$')


class Category(Enum):
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3
    integer_4 = 4


class CredasApiModelsDataCheckCheckRemark(BaseModel):
    category: Optional[Category] = Field(
        None, description='Match = 1, Mismatch = 2, Warning = 3, Comment = 4'
    )
    description: Optional[str] = None


class CredasApiModelsDataCheckPepSanctionsSanctionAddress(BaseModel):
    lines: Optional[List[str]] = None


class Type(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2


class CredasApiModelsDataCheckPepSanctionsSanctionDate(BaseModel):
    date: Optional[datetime] = None
    day: Optional[int] = None
    month: Optional[int] = None
    type: Optional[Type] = Field(None, description='Unknown = 0, Birth = 1, Death = 2')
    year: Optional[int] = None


class CredasApiModelsDataCheckPepSanctionsSanctionPosition(BaseModel):
    country: Optional[str] = None
    position: Optional[str] = None


class CredasApiModelsDataCheckPerson(BaseModel):
    dateOfBirth: datetime
    forename: constr(pattern=r'^([A-Za-z0-9 \'\.,&\(\)\/-]*)$')
    middleName: Optional[constr(pattern=r'^([A-Za-z0-9 \'\.,&\(\)\/-]*)$')] = None
    surname: constr(pattern=r'^([A-Za-z0-9 \'\.,&\(\)\/-]*)$')


class CredasApiModelsErrorsErrorResponse(BaseModel):
    details: Optional[Dict[str, Any]] = None
    message: Optional[str] = None


class DocumentType(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3
    integer_4 = 4
    integer_5 = 5
    integer_6 = 6
    integer_7 = 7
    integer_9 = 9
    integer_10 = 10
    integer_11 = 11


class DocumentStatus(Enum):
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3


class DocumentType1(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3
    integer_4 = 4
    integer_5 = 5
    integer_6 = 6
    integer_7 = 7
    integer_8 = 8
    integer_9 = 9
    integer_10 = 10
    integer_11 = 11
    integer_12 = 12
    integer_13 = 13
    integer_14 = 14
    integer_15 = 15
    integer_16 = 16
    integer_17 = 17
    integer_18 = 18
    integer_19 = 19
    integer_20 = 20
    integer_21 = 21
    integer_22 = 22
    integer_23 = 23
    integer_24 = 24
    integer_25 = 25
    integer_26 = 26
    integer_27 = 27
    integer_28 = 28
    integer_29 = 29
    integer_30 = 30
    integer_41 = 41
    integer_42 = 42
    integer_43 = 43
    integer_44 = 44
    integer_45 = 45
    integer_46 = 46
    integer_48 = 48
    integer_49 = 49
    integer_50 = 50
    integer_51 = 51
    integer_52 = 52
    integer_53 = 53
    integer_54 = 54
    integer_55 = 55
    integer_56 = 56
    integer_57 = 57
    integer_58 = 58
    integer_59 = 59
    integer_60 = 60
    integer_61 = 61
    integer_62 = 62
    integer_63 = 63
    integer_64 = 64
    integer_65 = 65
    integer_66 = 66
    integer_67 = 67
    integer_68 = 68
    integer_69 = 69
    integer_70 = 70
    integer_71 = 71
    integer_72 = 72
    integer_73 = 73
    integer_74 = 74
    integer_75 = 75
    integer_76 = 76
    integer_77 = 77


class CredasApiModelsImagesAddIdDocumentImageResponse(BaseModel):
    documentStatus: DocumentStatus = Field(
        ..., description='Active = 1, Deleted = 2, UnderReview = 3'
    )
    documentType: DocumentType1 = Field(
        ...,
        description='Unknown = 0, Passport = 1, DrivingLicense = 2, IdentificationCard = 3, TaxLetter = 4, NIC_Letter = 5, TV_Licence = 6, UtilityBill = 7, HighRiskWorkLicence = 8, TravelPermit = 9, BankLetter = 10, BenefitLetter = 11, BankStatement = 12, NINO_Letter = 13, CouncilTax = 14, ResidentPermit = 15, PhotoCard = 16, RepaymentLetter = 17, Invoice = 18, Visa = 19, AgeIdentificationCard = 20, MedicareCard = 21, MilitaryIdentificationCard = 22, UtilityLetter = 23, CouncilDocument = 24, JobLicence = 25, MembershipIDCard = 26, MilitaryIDCard = 27, ProofOfAgeCard = 28, TravelPermitNew = 29, WeaponsLicence = 30, AccountStatement = 41, TenancyAgreement = 42, BankDocument = 43, BankLetterNew = 44, BankStatementNew = 45, BenefitLetterNew = 46, CouncilDocumentNew = 48, CouncilLetter = 49, CouncilTaxNew = 50, DWPDocument = 51, HMRCDocument = 52, InformationSheet = 53, InsuranceDocument = 54, InsuranceLetter = 55, InvoiceNew = 56, NICLetter = 57, NINOLetter = 58, OfficialDocument = 59, OfficialLetter = 60, RepaymentLetterNew = 61, TaxLetterNew = 62, TaxStatement = 63, TelBill = 64, TelLetter = 65, TelecommunicationDocument = 66, TVLicence = 67, UniversityLetter = 68, UtilityBillNew = 69, UtilityDocument = 70, UtilityLetterNew = 71, WaterBill = 72, WaterDocument = 73, HighRiskWorkLicenceNew = 74, PhotoCardNew = 75, MedicareCardNew = 76, Certificate = 77',
    )
    facialMatch: bool
    id: UUID
    regCode: str


class CredasApiModelsImagesAddLivenessImageRequest(BaseModel):
    imageData: str
    registrationId: UUID


class CredasApiModelsImagesAddSelfieImageRequest(BaseModel):
    imageData: str
    registrationId: UUID


class CredasApiModelsImagesAddSelfieImageResponse(BaseModel):
    livenessConfirmed: bool


class DocumentAnalysisResult(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3
    integer_4 = 4
    integer_5 = 5
    integer_10 = 10
    integer_11 = 11


class DocumentSide(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2


class NameCheckMethod(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2


class NfcReadStatus(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3
    integer_4 = 4
    integer_5 = 5
    integer_6 = 6
    integer_7 = 7
    integer_8 = 8
    integer_9 = 9
    integer_10 = 10


class Status(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3


class CredasApiModelsImagesGetIdDocumentImageResponse(BaseModel):
    addressCity: Optional[str] = None
    addressFull: Optional[str] = None
    addressPostcode: Optional[str] = None
    country: Optional[str] = None
    countryCode: Optional[str] = None
    dateCreated: datetime
    dateOfBirth: Optional[datetime] = None
    description: str
    documentAnalysisResult: Optional[DocumentAnalysisResult] = Field(
        None,
        description='Unknown = 0, Passed = 1, Refer = 2, Expired = 3, NotSupported = 4, Undefined = 5, Fail = 10, NotPerformed = 11',
    )
    documentNumber: Optional[str] = None
    documentSide: Optional[DocumentSide] = Field(
        None, description='Front = 1, Back = 2'
    )
    expiryDate: Optional[datetime] = None
    facialMatch: bool
    forename: Optional[str] = None
    fullName: Optional[str] = None
    hiResUrl: str
    id: UUID
    isUnderReview: Optional[bool] = None
    manuallyVerified: Optional[bool] = None
    middleName: Optional[str] = None
    mrz1: Optional[str] = None
    mrz2: Optional[str] = None
    mrz3: Optional[str] = None
    nameCheck: bool
    nameCheckMethod: NameCheckMethod = Field(
        ..., description='Unknown = 0, Automatic = 1, Manual = 2'
    )
    nfcCheck: bool
    nfcFacialUrl: Optional[str] = None
    nfcReadStatus: NfcReadStatus = Field(
        ...,
        description='Unknown = 0, Passed = 1, Failed = 2, NotAttempted = 3, Skipped = 4, Unavailable = 5, NotAllowed = 6, NotTrusted = 7, NotApplicable = 8, Expired = 9, UnavailableWebJourney = 10',
    )
    primaryScanId: Optional[UUID] = None
    status: Status = Field(
        ...,
        description='Indicates the verification status of the document itself by combining visual analysis and NFC verification results. </br>Note that this may be a pass even if facial or name matches have failed.<br />  values=> Unknown = 0, Pass = 1, Refer = 2, Fail = 3',
    )
    surname: Optional[str] = None
    url: str


class CredasApiModelsImagesGetLivenessImageResponse(BaseModel):
    description: Optional[str] = None
    id: Optional[UUID] = None
    url: Optional[str] = None


class CredasApiModelsImagesGetLivenessPerformedImageResponse(BaseModel):
    base64Data: Optional[str] = None
    url: Optional[str] = None


class CredasApiModelsImagesGetSelfieImageResponse(BaseModel):
    base64Data: Optional[str] = None
    url: Optional[str] = None


class CredasApiModelsPropertyRegisterAddress(BaseModel):
    addressLine1: str
    addressLine2: Optional[str] = None
    addressLine3: Optional[str] = None
    city: str
    country: str
    county: Optional[str] = None
    postcode: str


class CredasApiModelsPropertyRegisterPerson(BaseModel):
    forename: str
    middleName: Optional[str] = None
    surname: str


class CredasApiModelsPropertyRegisterPropertyRegisterCheckRequest(BaseModel):
    address: CredasApiModelsPropertyRegisterAddress
    person: CredasApiModelsPropertyRegisterPerson
    regEntryId: UUID


class MatchResult(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3
    integer_4 = 4
    integer_5 = 5
    integer_6 = 6
    integer_7 = 7


class PropertyOwnership(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2


class CredasApiModelsPropertyRegisterPropertyRegisterCheckResponse(BaseModel):
    checkStatus: Optional[CheckStatus] = Field(
        None, description='Unknown = 0, Pass = 1, Refer = 2, Fail = 3'
    )
    hasBeenOverridden: Optional[bool] = None
    matchResult: Optional[MatchResult] = Field(
        None,
        description='Unknown = 0, FullNameMatch = 1, SurnameMatch = 2, NoNameMatch = 3, NoAddressMatch = 4, TitleNotRegistered = 5, Unavailable = 6, OutOfHours = 7',
    )
    matchResultText: Optional[str] = None
    propertyOwnership: Optional[PropertyOwnership] = Field(
        None, description='Unknown = 0, SoleOwnership = 1, JointOwnership = 2'
    )
    propertyOwnershipText: Optional[str] = None
    titleNumber: Optional[str] = None


class CredasApiModelsRegTypesRegType(BaseModel):
    id: Optional[UUID] = None
    name: Optional[str] = None


class DocumentType2(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3
    integer_4 = 4
    integer_5 = 5
    integer_6 = 6
    integer_7 = 7
    integer_9 = 9
    integer_10 = 10
    integer_11 = 11


class DocumentType3(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3
    integer_4 = 4
    integer_5 = 5
    integer_6 = 6
    integer_7 = 7
    integer_8 = 8
    integer_9 = 9
    integer_10 = 10
    integer_11 = 11
    integer_12 = 12
    integer_13 = 13
    integer_14 = 14
    integer_15 = 15
    integer_16 = 16
    integer_17 = 17
    integer_18 = 18
    integer_19 = 19
    integer_20 = 20
    integer_21 = 21
    integer_22 = 22
    integer_23 = 23
    integer_24 = 24
    integer_25 = 25
    integer_26 = 26
    integer_27 = 27
    integer_28 = 28
    integer_29 = 29
    integer_30 = 30
    integer_41 = 41
    integer_42 = 42
    integer_43 = 43
    integer_44 = 44
    integer_45 = 45
    integer_46 = 46
    integer_48 = 48
    integer_49 = 49
    integer_50 = 50
    integer_51 = 51
    integer_52 = 52
    integer_53 = 53
    integer_54 = 54
    integer_55 = 55
    integer_56 = 56
    integer_57 = 57
    integer_58 = 58
    integer_59 = 59
    integer_60 = 60
    integer_61 = 61
    integer_62 = 62
    integer_63 = 63
    integer_64 = 64
    integer_65 = 65
    integer_66 = 66
    integer_67 = 67
    integer_68 = 68
    integer_69 = 69
    integer_70 = 70
    integer_71 = 71
    integer_72 = 72
    integer_73 = 73
    integer_74 = 74
    integer_75 = 75
    integer_76 = 76
    integer_77 = 77


class CredasApiModelsRegistrationsAddInstantRegistrationResponse(BaseModel):
    documentStatus: DocumentStatus = Field(
        ..., description='Active = 1, Deleted = 2, UnderReview = 3'
    )
    documentType: DocumentType3 = Field(
        ...,
        description='Unknown = 0, Passport = 1, DrivingLicense = 2, IdentificationCard = 3, TaxLetter = 4, NIC_Letter = 5, TV_Licence = 6, UtilityBill = 7, HighRiskWorkLicence = 8, TravelPermit = 9, BankLetter = 10, BenefitLetter = 11, BankStatement = 12, NINO_Letter = 13, CouncilTax = 14, ResidentPermit = 15, PhotoCard = 16, RepaymentLetter = 17, Invoice = 18, Visa = 19, AgeIdentificationCard = 20, MedicareCard = 21, MilitaryIdentificationCard = 22, UtilityLetter = 23, CouncilDocument = 24, JobLicence = 25, MembershipIDCard = 26, MilitaryIDCard = 27, ProofOfAgeCard = 28, TravelPermitNew = 29, WeaponsLicence = 30, AccountStatement = 41, TenancyAgreement = 42, BankDocument = 43, BankLetterNew = 44, BankStatementNew = 45, BenefitLetterNew = 46, CouncilDocumentNew = 48, CouncilLetter = 49, CouncilTaxNew = 50, DWPDocument = 51, HMRCDocument = 52, InformationSheet = 53, InsuranceDocument = 54, InsuranceLetter = 55, InvoiceNew = 56, NICLetter = 57, NINOLetter = 58, OfficialDocument = 59, OfficialLetter = 60, RepaymentLetterNew = 61, TaxLetterNew = 62, TaxStatement = 63, TelBill = 64, TelLetter = 65, TelecommunicationDocument = 66, TVLicence = 67, UniversityLetter = 68, UtilityBillNew = 69, UtilityDocument = 70, UtilityLetterNew = 71, WaterBill = 72, WaterDocument = 73, HighRiskWorkLicenceNew = 74, PhotoCardNew = 75, MedicareCardNew = 76, Certificate = 77',
    )
    facialMatch: bool
    id: UUID
    regCode: str


class CheckCode(Enum):
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3


class CredasApiModelsRegistrationsCheckSubmittedIdDocumentsResponse(BaseModel):
    checkCode: Optional[CheckCode] = Field(
        None, description='Ok = 1, MayContinue = 2, CannotContinue = 3'
    )
    message: Optional[str] = None


class SourceType(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3
    integer_4 = 4
    integer_5 = 5
    integer_6 = 6
    integer_7 = 7
    integer_8 = 8
    integer_9 = 9
    integer_10 = 10


class CredasApiModelsRegistrationsIdDocumentSummary(BaseModel):
    addressCity: Optional[str] = None
    addressFull: Optional[str] = None
    addressPostcode: Optional[str] = None
    country: Optional[str] = None
    countryCode: Optional[str] = None
    dateCreated: datetime
    dateOfBirth: Optional[datetime] = None
    description: str
    documentAnalysisResult: Optional[DocumentAnalysisResult] = Field(
        None,
        description='Unknown = 0, Passed = 1, Refer = 2, Expired = 3, NotSupported = 4, Undefined = 5, Fail = 10, NotPerformed = 11',
    )
    documentNumber: Optional[str] = None
    documentSide: Optional[DocumentSide] = Field(
        None, description='Front = 1, Back = 2'
    )
    expiryDate: Optional[datetime] = None
    facialMatch: bool
    forename: Optional[str] = None
    fullName: Optional[str] = None
    id: UUID
    isUnderReview: Optional[bool] = None
    manuallyVerified: Optional[bool] = None
    middleName: Optional[str] = None
    mrz1: Optional[str] = None
    mrz2: Optional[str] = None
    mrz3: Optional[str] = None
    nameCheck: bool
    nameCheckMethod: NameCheckMethod = Field(
        ..., description='Unknown = 0, Automatic = 1, Manual = 2'
    )
    nfcCheck: bool
    nfcReadStatus: NfcReadStatus = Field(
        ...,
        description='Unknown = 0, Passed = 1, Failed = 2, NotAttempted = 3, Skipped = 4, Unavailable = 5, NotAllowed = 6, NotTrusted = 7, NotApplicable = 8, Expired = 9, UnavailableWebJourney = 10',
    )
    primaryScanId: Optional[UUID] = None
    status: Status = Field(
        ...,
        description='Indicates the verification status of the document itself by combining visual analysis and NFC verification results. </br>Note that this may be a pass even if facial or name matches have failed.<br />  values=> Unknown = 0, Pass = 1, Refer = 2, Fail = 3',
    )
    surname: Optional[str] = None


class CredasApiModelsRegistrationsIdVerification(BaseModel):
    checkStatus: Optional[CheckStatus] = Field(
        None, description='Unknown = 0, Pass = 1, Refer = 2, Fail = 3'
    )
    hasBeenOverridden: Optional[bool] = None


class CredasApiModelsRegistrationsJourneyUrl(BaseModel):
    url: Optional[str] = None
    validUntil: Optional[datetime] = None


class CredasApiModelsRegistrationsKeyValueItem(BaseModel):
    key: Optional[str] = None
    value: Optional[str] = None


class CredasApiModelsRegistrationsPersonalDetails(BaseModel):
    address: Optional[CredasApiModelsDataCheckAddress] = None
    dateOfBirth: Optional[datetime] = None
    forename: Optional[str] = None
    surname: Optional[str] = None


class CheckType1(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3
    integer_4 = 4
    integer_5 = 5
    integer_6 = 6
    integer_7 = 7
    integer_8 = 8


class Type1(Enum):
    integer_0 = 0
    integer_1 = 1


class CredasApiModelsRegistrationsRegistrationComment(BaseModel):
    checkType: Optional[CheckType1] = Field(
        None,
        description='IdDocuments = 1, StandardChecks = 2, InternationalSanctionsAndPep = 3, CreditStatusCheck = 4, BankAccountCheck = 5, ProofOfOwnership = 6, RightToWork = 7, RightToRent = 8',
    )
    comment: Optional[str] = None
    dateCreated: Optional[datetime] = None
    id: Optional[UUID] = None
    name: Optional[str] = None
    type: Optional[Type1] = Field(None, description='General = 0, CheckRelated = 1')


class NameMatchRoutine(Enum):
    integer_1 = 1
    integer_2 = 2


class RequiredCheck(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3
    integer_4 = 4
    integer_5 = 5
    integer_6 = 6
    integer_7 = 7
    integer_8 = 8


class CredasApiModelsRegistrationsRegistrationSettings(BaseModel):
    capturePersonalDetails: Optional[bool] = None
    nameMatchRoutine: Optional[NameMatchRoutine] = Field(
        None, description='Fuzzy = 1, Strict = 2'
    )
    requiredChecks: Optional[List[RequiredCheck]] = Field(
        None,
        description='The value of required checks determines what checks are performed. <br/>Unknown = 0,Id Documents = 1, Standard Checks = 2, International Sanctions and Pep = 3, Credit Status Check = 4, Bank Account Check = 5, Proof of Ownership = 6, Right to Work = 7, Right to Rent = 8<br />',
    )
    skipEmailStep: Optional[bool] = None


class DITFStatus(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2


class DataCheckResult(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3


class LivenessMethod(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2


class LivenessStatus(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3
    integer_4 = 4


class RightToWorkDocumentsProvided(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2


class SafeHarbourVerifiedStatus(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2


class Status3(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3
    integer_4 = 4
    integer_6 = 6


class CredasApiModelsRegistrationsReturnUrls(BaseModel):
    returnUrl: Optional[str] = None


class ShareCodeFacialMatchStatus(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3


class ShareCodeNameCheckStatus(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3


class CredasApiModelsRegistrationsSettlementStatus(BaseModel):
    checkStatus: Optional[CheckStatus] = Field(
        None, description='Unknown = 0, Pass = 1, Refer = 2, Fail = 3'
    )
    hasBeenOverridden: Optional[bool] = None
    hasShareCodePdf: Optional[bool] = None
    shareCodeFacialMatchStatus: Optional[ShareCodeFacialMatchStatus] = Field(
        None, description='Unknown = 0, Pass = 1, Refer = 2, Fail = 3'
    )
    shareCodeNameCheckStatus: Optional[ShareCodeNameCheckStatus] = Field(
        None, description='Unknown = 0, Pass = 1, Refer = 2, Fail = 3'
    )


class Type2(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3
    integer_4 = 4
    integer_5 = 5
    integer_6 = 6
    integer_7 = 7
    integer_8 = 8
    integer_9 = 9


class CredasApiModelsRegistrationsSupportedIdDocument(BaseModel):
    name: Optional[str] = None
    type: Optional[Type2] = Field(
        None,
        description='Passport = 1, DrivingLicence = 2, NationalIdCard = 3, CscsCard = 4, ResidencePermit = 5, Visa = 6, BirthCertificate = 7, HomeOfficeLetter = 8, Other = 9',
    )


class DeliveryMethod(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2


class CredasApiModelsRegistrationsUpdateContactDetailsRequest(BaseModel):
    deliveryMethod: Optional[DeliveryMethod] = Field(
        None, description='None = 0, Email = 1, Sms = 2'
    )
    diallingCode: Optional[constr(min_length=1, max_length=10)] = None
    email: Optional[constr(min_length=0, max_length=250)] = None
    forename: constr(min_length=1, max_length=50)
    middleName: Optional[constr(min_length=1, max_length=50)] = None
    phoneNumber: Optional[constr(min_length=1, max_length=20)] = None
    surname: constr(min_length=1, max_length=50)


class CredasApiModelsRegistrationsUpdateRegistrationStatusRequest(BaseModel):
    status: Status3 = Field(
        ...,
        description='Unknown = 0, Submitted = 1, Approved = 2, Rejected = 3, Exported = 4, Invited = 6',
    )


class CredasApiModelsReportViewGetReportViewByReferenceIdRequest(BaseModel):
    canChangeStatus: Optional[bool] = None
    canVerify: Optional[bool] = None
    referenceId: constr(min_length=0, max_length=255)
    user: Optional[constr(min_length=0, max_length=200)] = None


class CredasApiModelsReportViewGetReportViewByRegistrationIdRequest(BaseModel):
    canChangeStatus: Optional[bool] = None
    canVerify: Optional[bool] = None
    registrationId: UUID
    user: Optional[constr(min_length=0, max_length=200)] = None


class CredasApiModelsReportViewReportViewItem(BaseModel):
    forename: Optional[str] = None
    surname: Optional[str] = None
    url: Optional[str] = None
    validUntil: Optional[datetime] = None


class JudgementType(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3
    integer_4 = 4
    integer_5 = 5


class CredasApiModelsStatusChecksCCJCcjResult(BaseModel):
    address1: Optional[str] = None
    address2: Optional[str] = None
    address3: Optional[str] = None
    address4: Optional[str] = None
    address5: Optional[str] = None
    amount: Optional[str] = None
    caseNumber: Optional[str] = None
    courtName: Optional[str] = None
    dateEnd: Optional[datetime] = None
    dob: Optional[datetime] = None
    judgementDate: Optional[datetime] = None
    judgementType: Optional[JudgementType] = Field(
        None,
        description='Unknown = 0, Judgement = 1, Satisfaction = 2, Revocation = 3, SetAside = 4, AdministrationOrder = 5',
    )
    judgementTypeText: Optional[str] = None
    name: Optional[str] = None
    postcode: Optional[str] = None


class CredasApiModelsStatusChecksCompanyDirectorCompanyAppointment(BaseModel):
    address: Optional[str] = None
    appointmentDate: Optional[datetime] = None
    appointmentType: Optional[str] = None
    dob: Optional[datetime] = None
    name: Optional[str] = None
    nationality: Optional[str] = None
    occupation: Optional[str] = None
    title: Optional[str] = None


class MatchType(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3


class CredasApiModelsStatusChecksCompanyDirectorCompanyDirectorResult(BaseModel):
    companyAppointments: Optional[
        List[CredasApiModelsStatusChecksCompanyDirectorCompanyAppointment]
    ] = None
    companyName: Optional[str] = None
    companyRegNo: Optional[str] = None
    dateAppointed: Optional[datetime] = None
    matchType: Optional[MatchType] = Field(
        None,
        description='Unknown = 0, NameAndDateOfBirth = 1, NameAndAddress = 2, NameAndAddressAndDateOfBirth = 3',
    )
    matchTypeText: Optional[str] = None
    registeredOffice: Optional[str] = None


class CredasApiModelsStatusChecksInsolvencyAddress(BaseModel):
    address1: Optional[str] = None
    address2: Optional[str] = None
    address3: Optional[str] = None
    address4: Optional[str] = None
    address5: Optional[str] = None
    dps: Optional[str] = None
    isEmpty: Optional[bool] = None
    postcode: Optional[str] = None


class Type3(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3
    integer_4 = 4
    integer_5 = 5


class CredasApiModelsStatusChecksInsolvencyInsolvencyResult(BaseModel):
    address: Optional[CredasApiModelsStatusChecksInsolvencyAddress] = None
    aliases: Optional[str] = None
    assetTotal: Optional[str] = None
    caseNo: Optional[str] = None
    caseType: Optional[str] = None
    court: Optional[str] = None
    debtTotal: Optional[str] = None
    description: Optional[str] = None
    dob: Optional[datetime] = None
    name: Optional[str] = None
    occupation: Optional[str] = None
    presentationDate: Optional[datetime] = None
    previousAddress: Optional[CredasApiModelsStatusChecksInsolvencyAddress] = None
    serviceOffice: Optional[str] = None
    startDate: Optional[datetime] = None
    status: Optional[str] = None
    telephoneNumber: Optional[str] = None
    tradingNames: Optional[str] = None
    type: Optional[Type3] = Field(
        None,
        description='Unknown = 0, NorthernIrelandBankruptcy = 1, ScottishSequestrationBankruptcy = 2, EnglandAndWalesIVA = 3, EnglandAndWalesDRO = 4, EnglandAndWalesBankruptcy = 5',
    )
    typeText: Optional[str] = None


class Status5(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3


class CredasApiModelsStatusChecksStatusCheck(BaseModel):
    address: Optional[CredasApiModelsDataCheckAddress] = None
    ccj: Optional[List[CredasApiModelsStatusChecksCCJCcjResult]] = None
    checkDate: Optional[datetime] = None
    companyDirector: Optional[
        List[CredasApiModelsStatusChecksCompanyDirectorCompanyDirectorResult]
    ] = None
    hasBeenOverridden: Optional[bool] = None
    insolvency: Optional[
        List[CredasApiModelsStatusChecksInsolvencyInsolvencyResult]
    ] = None
    person: Optional[CredasApiModelsDataCheckPerson] = None
    status: Optional[Status5] = Field(
        None, description='Unknown = 0, Pass = 1, Refer = 2, Fail = 3'
    )


class CredasApiModelsStatusChecksStatusCheckRequest(BaseModel):
    address: CredasApiModelsDataCheckAddress
    person: CredasApiModelsDataCheckPerson
    regEntryId: UUID


class CredasApiModelsStatusOverridesOverrideCheckStatusRequest(BaseModel):
    checkType: CheckType1 = Field(
        ...,
        description='IdDocuments = 1, StandardChecks = 2, InternationalSanctionsAndPep = 3, CreditStatusCheck = 4, BankAccountCheck = 5, ProofOfOwnership = 6, RightToWork = 7, RightToRent = 8',
    )
    comment: str
    status: Status5 = Field(
        ..., description='Unknown = 0, Pass = 1, Refer = 2, Fail = 3'
    )


class CredasApiModelsWebVerificationsGetWebVerificationsByReferenceIdRequest(BaseModel):
    referenceId: constr(min_length=0, max_length=255)
    returnUrls: Optional[CredasApiModelsRegistrationsReturnUrls] = None


class CredasApiModelsWebVerificationsGetWebVerificationsByRegistrationIdRequest(
    BaseModel
):
    registrationId: UUID
    returnUrls: Optional[CredasApiModelsRegistrationsReturnUrls] = None


class CredasApiModelsWebVerificationsWebVerificationsItem(BaseModel):
    journeyUrl: Optional[CredasApiModelsRegistrationsJourneyUrl] = None


class ApiImagesIdDocumentRegistrationIdGetResponse(
    RootModel[List[CredasApiModelsImagesGetIdDocumentImageResponse]]
):
    root: List[CredasApiModelsImagesGetIdDocumentImageResponse]


class ApiRegTypesGetResponse(RootModel[List[CredasApiModelsRegTypesRegType]]):
    root: List[CredasApiModelsRegTypesRegType]


class CredasApiModelsBankAccountsAccountVerificationRequest(BaseModel):
    accountDetails: CredasApiModelsBankAccountsAccountDetails
    address: CredasApiModelsDataCheckAddress
    person: CredasApiModelsBankAccountsPerson
    regEntryId: UUID


class CredasApiModelsCompaniesCompanyDetail(BaseModel):
    addressLine1: Optional[str] = None
    companyName: Optional[str] = None
    companyNumber: Optional[str] = None
    dateOfRegistration: Optional[datetime] = None
    duplicate: Optional[bool] = None
    id: Optional[UUID] = None
    locality: Optional[str] = None
    postCode: Optional[str] = None
    region: Optional[str] = None
    significantParentCompanies: Optional[
        List[CredasApiModelsCompaniesCompanyDetail]
    ] = None
    significantPeople: Optional[List[CredasApiModelsCompaniesSignificantPerson]] = None


class CredasApiModelsDataCheckAddDataCheckRequest(BaseModel):
    checkType: CheckType = Field(
        ...,
        description='The value of checkType dictates what checks are performed. <br/>The StandardAml check (value = 1) will check DOB & Mortality. <br/>The InternationalPepSanctions check (value = 3) will check just International PEP & Sanctions. <br/>The EnhancedAml check (value = 2) will perform both these checks and is equivalent to making two calls with values of 1 then 3 and will be charged accordingly. <br />  values=> None = 0, StandardAml = 1, EnhancedAml = 2, InternationalPepSanctions = 3',
    )
    currentAddress: CredasApiModelsDataCheckAddress
    person: CredasApiModelsDataCheckPerson
    regEntryId: UUID


class CredasApiModelsDataCheckPepSanctionsPepSanctionItem(BaseModel):
    addresses: Optional[List[CredasApiModelsDataCheckPepSanctionsSanctionAddress]] = (
        None
    )
    aliases: Optional[List[str]] = None
    fullName: Optional[str] = None
    id: Optional[str] = None
    positions: Optional[List[CredasApiModelsDataCheckPepSanctionsSanctionPosition]] = (
        None
    )
    sanctionBodies: Optional[List[str]] = None
    sanctionDates: Optional[List[CredasApiModelsDataCheckPepSanctionsSanctionDate]] = (
        None
    )


class CredasApiModelsImagesAddIdDocumentImageRequest(BaseModel):
    documentParameters: Optional[List[CredasApiModelsRegistrationsKeyValueItem]] = None
    documentType: DocumentType = Field(
        ...,
        description='Other = 0, Passport = 1, DrivingLicence = 2, Visa = 3, CscsCard = 4, HomeOfficeLetter = 5, BirthCertificate = 6, NationalIdCard = 7, ResidencePermit = 9, UtilityBill = 11',
    )
    imageData: str
    registrationId: UUID


class CredasApiModelsRegistrationsAddInstantRegistrationRequest(BaseModel):
    document: str
    documentParameters: Optional[List[CredasApiModelsRegistrationsKeyValueItem]] = None
    documentType: DocumentType2 = Field(
        ...,
        description='Other = 0, Passport = 1, DrivingLicence = 2, Visa = 3, CscsCard = 4, HomeOfficeLetter = 5, BirthCertificate = 6, NationalIdCard = 7, ResidencePermit = 9, UtilityBill = 11',
    )
    forename: constr(min_length=1, max_length=50)
    middleName: Optional[constr(min_length=1, max_length=50)] = None
    parameters: Optional[List[CredasApiModelsRegistrationsKeyValueItem]] = None
    referenceId: Optional[constr(min_length=0, max_length=255)] = None
    regTypeId: UUID
    selfie: Optional[str] = None
    significantPersonId: Optional[UUID] = None
    surname: constr(min_length=1, max_length=50)


class CredasApiModelsRegistrationsAddRegistrationRequest(BaseModel):
    diallingCode: Optional[constr(min_length=1, max_length=10)] = None
    duplicateAcknowledgement: Optional[bool] = None
    emailAddress: Optional[constr(min_length=0, max_length=250)] = None
    forename: constr(min_length=1, max_length=50)
    middleName: Optional[constr(min_length=1, max_length=50)] = None
    parameters: Optional[List[CredasApiModelsRegistrationsKeyValueItem]] = None
    phoneNumber: Optional[constr(min_length=1, max_length=20)] = None
    provideWebJourneyLink: Optional[bool] = None
    referenceId: Optional[constr(min_length=0, max_length=255)] = None
    regTypeId: UUID
    returnUrls: Optional[CredasApiModelsRegistrationsReturnUrls] = None
    sendEmail: Optional[bool] = None
    sendSms: bool
    settings: Optional[CredasApiModelsRegistrationsRegistrationSettings] = None
    significantPersonId: Optional[UUID] = None
    surname: constr(min_length=1, max_length=50)


class CredasApiModelsRegistrationsAddRegistrationResponse(BaseModel):
    id: UUID
    regCode: str
    webJourneyUrl: Optional[CredasApiModelsRegistrationsJourneyUrl] = None


class CredasApiModelsRegistrationsDataCheckSourceSummary(BaseModel):
    address: Optional[CredasApiModelsDataCheckAddress] = None
    dateCreated: Optional[datetime] = None
    hasBeenOverridden: Optional[bool] = None
    hasPepSanctionsData: Optional[bool] = None
    label: Optional[str] = None
    pepSanctionsData: Optional[
        List[CredasApiModelsDataCheckPepSanctionsPepSanctionItem]
    ] = None
    person: Optional[CredasApiModelsDataCheckPerson] = None
    remarks: Optional[List[CredasApiModelsDataCheckCheckRemark]] = None
    sourceType: Optional[SourceType] = Field(
        None,
        description='Unknown = 0, EditedElectoralRollUk = 1, LandlineAppendUk = 2, MortalityUk = 3, CreaditHeaderAmlUk = 4, NcoaAlertFlagUk = 5, NcoaAlertFullUk = 6, SanctionsEnhancedInternational = 7, PepEnhancedInternational = 8, NationalIdentityRegisterUk = 9, LandRegistry = 10',
    )
    status: Optional[Status] = Field(
        None, description='Unknown = 0, Pass = 1, Refer = 2, Fail = 3'
    )


class CredasApiModelsRegistrationsRegistrationSummary(BaseModel):
    Comments: Optional[List[CredasApiModelsRegistrationsRegistrationComment]] = None
    DITFDate: Optional[datetime] = None
    DITFStatus_1: Optional[DITFStatus] = Field(
        None, alias='DITFStatus', description='No = 0, Yes = 1, Pending = 2'
    )
    bankAccountChecks: Optional[
        List[CredasApiModelsBankAccountsAccountVerificationResponse]
    ] = None
    createdByAgencyUserId: Optional[UUID] = None
    creditStatusCheck: Optional[CredasApiModelsStatusChecksStatusCheck] = None
    customTermsAccepted: Optional[bool] = None
    customTermsAcceptedDateTime: Optional[datetime] = None
    customTermsAcceptedVersion: Optional[int] = None
    dataCheckResult: DataCheckResult = Field(
        ..., description='Unknown = 0, Pass = 1, Refer = 2, Fail = 3'
    )
    dataCheckSources: Optional[
        List[CredasApiModelsRegistrationsDataCheckSourceSummary]
    ] = None
    dataChecksPerformed: bool
    dateCompleted: Optional[datetime] = None
    dateCreated: datetime
    email: Optional[str] = None
    forename: str
    hasLivenessPerformed: Optional[bool] = None
    hasSelfie: Optional[bool] = None
    id: UUID
    idDocuments: Optional[List[CredasApiModelsRegistrationsIdDocumentSummary]] = None
    idVerification: Optional[CredasApiModelsRegistrationsIdVerification] = None
    isAgentLed: Optional[bool] = None
    livenessMethod: Optional[LivenessMethod] = Field(
        None, description='NotApplicable = 0, UniqueActionProcess = 1, Passive = 2'
    )
    livenessStatus: LivenessStatus = Field(
        ...,
        description='NotSubmitted = 0, Verified = 1, Unverified = 2, Unknown = 3, RetakeRequested = 4',
    )
    livenessVerified: bool
    middleName: Optional[str] = None
    personalDetails: Optional[CredasApiModelsRegistrationsPersonalDetails] = None
    phoneNumber: Optional[str] = None
    proofOfOwnershipCheck: Optional[
        CredasApiModelsPropertyRegisterPropertyRegisterCheckResponse
    ] = None
    referenceId: Optional[constr(min_length=0, max_length=255)] = None
    regCode: str
    regTypeId: UUID
    rightToRentCheck: Optional[CredasApiModelsRegistrationsSettlementStatus] = None
    rightToWorkCheck: Optional[CredasApiModelsRegistrationsSettlementStatus] = None
    rightToWorkDocumentsProvided: RightToWorkDocumentsProvided = Field(
        ...,
        description='This property is no longer supported. Right to work is now available as an individual check.<br />  values=> Pending = 0, Pass = 1, Fail = 2',
    )
    safeHarbourVerifiedDate: Optional[datetime] = None
    safeHarbourVerifiedStatus: Optional[SafeHarbourVerifiedStatus] = Field(
        None, description='No = 0, Yes = 1, UnderReview = 2'
    )
    status: Status3 = Field(
        ...,
        description='Unknown = 0, Submitted = 1, Approved = 2, Rejected = 3, Exported = 4, Invited = 6',
    )
    surname: str


class CredasApiModelsReportViewGetReportViewResponse(BaseModel):
    results: Optional[List[CredasApiModelsReportViewReportViewItem]] = None


class CredasApiModelsWebVerificationsGetWebVerificationsResponse(BaseModel):
    results: Optional[List[CredasApiModelsWebVerificationsWebVerificationsItem]] = None


class ApiRegistrationsReferenceidReferenceIdSummaryGetResponse(
    RootModel[List[CredasApiModelsRegistrationsRegistrationSummary]]
):
    root: List[CredasApiModelsRegistrationsRegistrationSummary]


class CredasApiModelsRegistrationsPagedRegistrationSummary(BaseModel):
    registrationSummaries: Optional[
        List[CredasApiModelsRegistrationsRegistrationSummary]
    ] = None
    totalCount: Optional[int] = None


CredasApiModelsCompaniesCompanyDetail.model_rebuild()
