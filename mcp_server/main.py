# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T18:25:36+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union
from uuid import UUID

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity
from fastapi import Path, Query

from models import (
    ApiImagesIdDocumentRegistrationIdGetResponse,
    ApiRegistrationsReferenceidReferenceIdSummaryGetResponse,
    ApiRegTypesGetResponse,
    CredasApiModelsBankAccountsAccountVerificationRequest,
    CredasApiModelsBankAccountsAccountVerificationResponse,
    CredasApiModelsCompaniesCompanyDetail,
    CredasApiModelsDataCheckAddDataCheckRequest,
    CredasApiModelsDataCheckAddDataCheckResponse,
    CredasApiModelsErrorsErrorResponse,
    CredasApiModelsImagesAddIdDocumentImageRequest,
    CredasApiModelsImagesAddIdDocumentImageResponse,
    CredasApiModelsImagesAddLivenessImageRequest,
    CredasApiModelsImagesAddSelfieImageRequest,
    CredasApiModelsImagesAddSelfieImageResponse,
    CredasApiModelsImagesGetLivenessImageResponse,
    CredasApiModelsImagesGetLivenessPerformedImageResponse,
    CredasApiModelsImagesGetSelfieImageResponse,
    CredasApiModelsPropertyRegisterPropertyRegisterCheckRequest,
    CredasApiModelsPropertyRegisterPropertyRegisterCheckResponse,
    CredasApiModelsRegistrationsAddInstantRegistrationRequest,
    CredasApiModelsRegistrationsAddInstantRegistrationResponse,
    CredasApiModelsRegistrationsAddRegistrationRequest,
    CredasApiModelsRegistrationsAddRegistrationResponse,
    CredasApiModelsRegistrationsCheckSubmittedIdDocumentsResponse,
    CredasApiModelsRegistrationsPagedRegistrationSummary,
    CredasApiModelsRegistrationsRegistrationSettings,
    CredasApiModelsRegistrationsRegistrationSummary,
    CredasApiModelsRegistrationsSupportedIdDocument,
    CredasApiModelsRegistrationsUpdateContactDetailsRequest,
    CredasApiModelsRegistrationsUpdateRegistrationStatusRequest,
    CredasApiModelsReportViewGetReportViewByReferenceIdRequest,
    CredasApiModelsReportViewGetReportViewByRegistrationIdRequest,
    CredasApiModelsReportViewGetReportViewResponse,
    CredasApiModelsStatusChecksStatusCheck,
    CredasApiModelsStatusChecksStatusCheckRequest,
    CredasApiModelsStatusOverridesOverrideCheckStatusRequest,
    CredasApiModelsWebVerificationsGetWebVerificationsByReferenceIdRequest,
    CredasApiModelsWebVerificationsGetWebVerificationsByRegistrationIdRequest,
    CredasApiModelsWebVerificationsGetWebVerificationsResponse,
)

app = MCPProxy(
    title='Credas API',
    version='v1',
)


@app.post('/api/bank-accounts/verify', tags=['bank_account_verification'])
def verify(
    apikey: str, body: CredasApiModelsBankAccountsAccountVerificationRequest = None
):
    """
    Verifies bank account details.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/companies',
    description=""" If a company appears multiple times within the structure, it will only be detailed in full (i.e. with significant ownership details) in its first instance. Subsequent instances will be 
            marked as duplicates.
            Whilst duplicate instances of companies can and will be identified, it is not possible to categorically identify duplicated people. """,
    tags=['company_info_management'],
)
def search_company(
    company_number: Optional[str] = Query(None, alias='companyNumber'),
    apikey: str = ...,
):
    """
    Searches for a company based on its Company Number and returns its details.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/companies/{companyId}', tags=['company_info_management'])
def get_company(company_id: UUID = Path(..., alias='companyId'), apikey: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/credit-status/perform',
    tags=['company_info_management', 'data_check_status_management'],
)
def check_credit_status(
    apikey: str, body: CredasApiModelsStatusChecksStatusCheckRequest = None
):
    """
    Check includes identifying bankruptcy, insolvency, CCJ's or Company Directorship.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/datachecks',
    tags=['data_check_status_management', 'registration_status_management'],
)
def add_data_check(
    apikey: str, body: CredasApiModelsDataCheckAddDataCheckRequest = None
):
    """
    Creates new data check against a specified registration.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/images/id-document',
    tags=['image_management_for_documents', 'registration_status_management'],
)
def add_id_document_image(
    apikey: str, body: CredasApiModelsImagesAddIdDocumentImageRequest = None
):
    """
    Add an id document image to the specified registration.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/images/id-document/{registrationId}',
    tags=['registration_status_management', 'image_management_for_documents'],
)
def get_id_document_images(
    registration_id: UUID = Path(..., alias='registrationId'), apikey: str = ...
):
    """
    Get all id document images associated with a registration.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/images/liveness',
    tags=['image_management_for_documents', 'registration_status_management'],
)
def add_liveness_image(
    apikey: str, body: CredasApiModelsImagesAddLivenessImageRequest = None
):
    """
    Add a liveness image (UAP) to the specified registration.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/images/liveness-performed/{registrationId}',
    tags=[
        'registration_status_management',
        'image_management_for_documents',
        'report_retrieval_by_id',
    ],
)
def get_liveness_performed_image(
    registration_id: UUID = Path(..., alias='registrationId'), apikey: str = ...
):
    """
    Retrieve the liveness performed image associated with a registration.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/images/liveness/{registrationId}',
    tags=[
        'registration_status_management',
        'image_management_for_documents',
        'report_retrieval_by_id',
    ],
)
def get_liveness_image(
    registration_id: UUID = Path(..., alias='registrationId'), apikey: str = ...
):
    """
    Retrieve the liveness action image (UAP) associated with a registration.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/images/scan-report-pdf/{scanId}',
    tags=['pdf_report_creation', 'report_retrieval_by_id'],
)
def get_scan_report_pdf(scan_id: UUID = Path(..., alias='scanId'), apikey: str = ...):
    """
    Returns a detailed report on the analysis that has taken place of a scanned document
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/images/selfie',
    tags=['image_management_for_documents', 'registration_status_management'],
)
def add_selfie_image(
    apikey: str, body: CredasApiModelsImagesAddSelfieImageRequest = None
):
    """
    Add a selfie image to the registration.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/images/selfie/{registrationId}',
    tags=['registration_status_management', 'image_management_for_documents'],
)
def get_selfie_image(
    registration_id: UUID = Path(..., alias='registrationId'), apikey: str = ...
):
    """
    Retrieve the selfie image associated with a registration.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/property-register',
    tags=['registration_status_management', 'data_check_status_management'],
)
def add_property_register_check(
    apikey: str,
    body: CredasApiModelsPropertyRegisterPropertyRegisterCheckRequest = None,
):
    """
    Creates new property registry check against the registration.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/property-register/{id}',
    tags=[
        'registration_status_management',
        'data_check_status_management',
        'report_retrieval_by_id',
    ],
)
def get_property_register_check_result(id: UUID, apikey: str = ...):
    """
    Retrieves property registry check associated with the registration.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/reg-types', tags=['registration_status_management'])
def get_all(apikey: str):
    """
    Gets all available RegTypes.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/registrations',
    tags=['registration_status_management', 'data_check_status_management'],
)
def add_registration(
    apikey: str, body: CredasApiModelsRegistrationsAddRegistrationRequest = None
):
    """
    Creates new registration.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/registrations/instant',
    description=""" It's designed to provide a quick integration path for external systems which capture these details. """,
    tags=['registration_status_management', 'image_management_for_documents'],
)
def add_instant_registration(
    apikey: str, body: CredasApiModelsRegistrationsAddInstantRegistrationRequest = None
):
    """
    Creates new registration record, adds an ID document and optional selfie image in one go.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/registrations/referenceid/{referenceId}/summary',
    tags=['registration_status_management', 'report_retrieval_by_id'],
)
def get_registration_summaries_by_reference_id(
    reference_id: str = Path(..., alias='referenceId'), apikey: str = ...
):
    """
    Finds registrations by the ReferenceId.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/registrations/regcode/{regCode}/summary',
    tags=['registration_status_management', 'company_info_management'],
)
def get_registration_summary_by_reg_code(
    reg_code: str = Path(..., alias='regCode'), apikey: str = ...
):
    """
    Finds a registration by the RegCode.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/registrations/search',
    tags=['registration_status_management', 'contact_info_management_for_registration'],
)
def get_registration_search(
    page_num: Optional[int] = Query(0, alias='pageNum'),
    page_size: Optional[int] = Query(50, alias='pageSize'),
    forename: Optional[str] = None,
    surname: Optional[str] = None,
    email: Optional[str] = None,
    dob: Optional[str] = None,
    apikey: str = ...,
):
    """
        Gets paged registration list by search criteria or nothing if there are no matching fields.
    Optional parameters may be appended to the query string.
    Maximum page size is 50.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/registrations/{id}/check-submitted-id-documents',
    tags=['registration_status_management', 'data_check_status_management'],
)
def check_submitted_id_documents(id: UUID, apikey: str = ...):
    """
    Checks if submitted documents are sufficient to complete registration.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/registrations/{id}/contact-details',
    tags=['contact_info_management_for_registration', 'registration_status_management'],
)
def update_contact_details(
    id: UUID,
    apikey: str = ...,
    body: CredasApiModelsRegistrationsUpdateContactDetailsRequest = None,
):
    """
    Updates a registration's contact details.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/registrations/{id}/override-check-status',
    tags=['registration_status_management', 'data_check_status_management'],
)
def override_check_status(
    id: UUID,
    apikey: str = ...,
    body: CredasApiModelsStatusOverridesOverrideCheckStatusRequest = None,
):
    """
    Sets an override for a specific check on the registration.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/registrations/{id}/pdf-export',
    tags=['pdf_report_creation', 'registration_status_management'],
)
def get_registration_pdf_export(id: UUID, apikey: str = ...):
    """
    Returns PDF export for a given registration.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/registrations/{id}/pdf-export-sections',
    tags=['pdf_report_creation', 'registration_status_management'],
)
def get_api_registrations__id_pdf_export_sections(
    id: UUID,
    comments: Optional[bool] = Query(None, alias='Comments'),
    contact_details: Optional[bool] = Query(None, alias='ContactDetails'),
    standard_checks: Optional[bool] = Query(None, alias='StandardChecks'),
    pep_sanction_checks: Optional[bool] = Query(None, alias='PepSanctionChecks'),
    proof_of_ownership: Optional[bool] = Query(None, alias='ProofOfOwnership'),
    bank_account_check: Optional[bool] = Query(None, alias='BankAccountCheck'),
    credit_status_check: Optional[bool] = Query(None, alias='CreditStatusCheck'),
    liveness: Optional[bool] = Query(None, alias='Liveness'),
    exclude_selfie: Optional[bool] = Query(None, alias='ExcludeSelfie'),
    exclude_i_d_documents: Optional[bool] = Query(None, alias='ExcludeIDDocuments'),
    d_i_a_t_f_section: Optional[bool] = Query(None, alias='DIATFSection'),
    apikey: str = ...,
):
    """
    Returns a PDF report for a given registration containing specified sections
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/registrations/{id}/pdf-settlement-status',
    tags=[
        'registration_status_management',
        'pdf_report_creation',
        'report_retrieval_by_id',
    ],
)
def get_share_code_pdf_export(id: UUID, apikey: str = ...):
    """
    Returns settlement status PDF (Share Code) for a given registration.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/registrations/{id}/resend-invitation',
    tags=[
        'registration_status_management',
        'contact_info_management_for_registration',
        'verification_link_retrieval',
    ],
)
def resend_invitation(id: UUID, apikey: str = ...):
    """
    Resends any invitation for the specified registration.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/registrations/{id}/settings',
    tags=['registration_status_management', 'contact_info_management_for_registration'],
)
def get_registration_settings(id: UUID, apikey: str = ...):
    """
    Gets registration settings or nothing if there are no settings associated with the registration.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/registrations/{id}/settings',
    tags=['registration_status_management', 'contact_info_management_for_registration'],
)
def update_registration_settings(
    id: UUID,
    apikey: str = ...,
    body: CredasApiModelsRegistrationsRegistrationSettings = None,
):
    """
    Updates registration settings.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put('/api/registrations/{id}/status', tags=['registration_status_management'])
def update_registration_status(
    id: UUID,
    apikey: str = ...,
    body: CredasApiModelsRegistrationsUpdateRegistrationStatusRequest = None,
):
    """
    Updates the status of the registration to one specified in the request.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/registrations/{id}/summary',
    tags=['registration_status_management', 'report_retrieval_by_id'],
)
def get_registration_summary(id: UUID, apikey: str = ...):
    """
    Finds a registration by the Id.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/registrations/{id}/supported-id-documents',
    tags=['registration_status_management', 'report_retrieval_by_id'],
)
def get_registration_supported_id_documents(id: UUID, apikey: str = ...):
    """
    Get a list of supported id document for the specified registration id.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/report-view/by-referenceid',
    description=""" It may return none, one or many (up to 20) matching results.
Each result contains a secure url; UTC date/time of when the link expires; name details of a person associated with the registration. """,
    tags=['report_retrieval_by_id', 'verification_link_retrieval'],
)
def get_report_view_by_reference_id(
    apikey: str, body: CredasApiModelsReportViewGetReportViewByReferenceIdRequest = None
):
    """
    Retrieves secure links to registration details pages searching by the Reference Id.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/report-view/by-registrationid',
    description=""" It may return none or one matching result.
Each result contains a secure url; UTC date/time of when the link expires; name details of a person associated with the registration. """,
    tags=[
        'report_retrieval_by_id',
        'verification_link_retrieval',
        'registration_status_management',
    ],
)
def get_report_view_by_registration_id(
    apikey: str,
    body: CredasApiModelsReportViewGetReportViewByRegistrationIdRequest = None,
):
    """
    Retrieves secure link to registration details page searching by the Registration Id.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/web-verifications/by-referenceid',
    description=""" It may return none, one or many (up to 20) matching results.
Each result contains a secure url; UTC date/time of when the link expires; name details of a person associated with the registration. """,
    tags=['report_retrieval_by_id', 'verification_link_retrieval'],
)
def get_web_verifications_by_reference_id(
    apikey: str,
    body: CredasApiModelsWebVerificationsGetWebVerificationsByReferenceIdRequest = None,
):
    """
    Retrieves secure links to web verification pages searching by the Reference Id.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/web-verifications/by-registrationid',
    description=""" It may return none or one matching result.
Each result contains a secure url; UTC date/time of when the link expires; name details of a person associated with the registration. """,
    tags=[
        'registration_status_management',
        'report_retrieval_by_id',
        'verification_link_retrieval',
    ],
)
def get_web_verifications_by_registration_id(
    apikey: str,
    body: CredasApiModelsWebVerificationsGetWebVerificationsByRegistrationIdRequest = None,
):
    """
    Retrieves secure link to web verification page searching by the Registration Id.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
